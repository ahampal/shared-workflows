name: Build and push image digests to GitHub
description: Composite action to build and push image digests to GitHub

inputs:
  registry:
    description: |
      Google Artifact Registry to store docker images in.
    default: "us-docker.pkg.dev"
  tag:
    description: |
      Docker images tag to be pushed.
    required: true
  context:
    description: |
      Path to the Docker build context.
    default: "."
  environment:
    description: |
      Environment for pushing artifacts (can be either dev or prod).
    default: dev
  image_name:
    description: |
      Name of the image to be pushed to GAR.
    required: true
  build-args:
    description: |
      List of arguments necessary for the Docker image to be built.
    default: ""
  file:
    description: |
      The dockerfile to use.
    required: false
  platform:
    description: |
      Platforms to build the image for
    required: true
  cache-from:
    description: |
      Where cache should be fetched from
    required: false
    default: "type=gha"
  cache-to:
    description: |
      Where cache should be stored to
    required: false
    default: "type=gha,mode=max"
  ssh:
    description: |
      List of SSH agent socket or keys to expose to the build
  build-contexts:
    description: |
      List of additional build contexts (e.g., name=path)
    required: false
  docker-buildx-driver:
    description: |
      The driver to use for Docker Buildx
    required: false
    default: "docker-container"

outputs:
  full_image_name:
    description: Full image name
    value: ${{ steps.export-full-image-name.outputs.full_image_name }}

runs:
  using: composite
  steps:
    - name: try printing env
      shell: bash
      run: |
        echo ${{ env.platform_env }}
    - name: Prepare
      shell: bash
      run: |
        platform=${{ inputs.platform }}
        echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
    - name: Checkout
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        repository: grafana/shared-workflows
        ref: multiarch-docker-builds-using-sh-runners
        path: shared-workflows
    - name: Get repository name
      id: get-repository-name
      shell: bash
      run: |
        REPO_NAME=$(echo ${{ github.repository }} | awk -F'/' '{print $2}')
        echo "repo_name=${REPO_NAME}" >> ${GITHUB_OUTPUT}
    - name: Resolve GCP project
      id: resolve-project
      shell: bash
      run: |
        if [ "${{ inputs.environment }}" == 'dev' ]; then
          PROJECT="grafanalabs-dev"
        elif [ "${{ inputs.environment }}" == 'prod' ]; then
          PROJECT="grafanalabs-global"
        else
          echo "Invalid environment. Valid environment variable inputs: dev, prod"
          exit 1
        fi
        echo "project=${PROJECT}" >> ${GITHUB_OUTPUT}
    - name: Login to GAR
      uses: ./shared-workflows/actions/login-to-gar
      with:
        environment: ${{ inputs.environment }}
    - name: Export full image name
      id: export-full-image-name
      shell: bash
      run: |
        FULL_IMAGE_NAME="${{ inputs.registry }}/${{ steps.resolve-project.outputs.project }}/docker-${{ steps.get-repository-name.outputs.repo_name }}-${{ inputs.environment }}/${{ inputs.image_name }}"
        echo "full_image_name=${FULL_IMAGE_NAME}" >> ${GITHUB_OUTPUT}
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
      with:
        images: ${FULL_IMAGE_NAME}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0
      with:
        driver: ${{ inputs.docker-buildx-driver }}
    - name: Build the container
      uses: docker/build-push-action@4a13e500e55cf31b7a5d59a38ab2040ab0f42f56 # v5.1.0
      id: build
      with:
        context: ${{ inputs.context }}
        labels: ${{ steps.meta.outputs.labels }}
        outputs: type=image,name=${{ steps.export-full-image-name.outputs.full_image_name }},push-by-digest=true,name-canonical=true,push=true
        build-args: ${{ inputs.build-args }}
        cache-from: ${{ inputs.cache-from }}
        cache-to: ${{ inputs.cache-to }}
        file: ${{ inputs.file }}
        platforms: ${{ inputs.platform }}
        ssh: ${{ inputs.ssh }}
        build-contexts: ${{ inputs.build-contexts }}
    - name: Export digest
      shell: bash
      run: |
        mkdir -p /tmp/digests
        digest="${{ steps.build.outputs.digest }}"
        touch "/tmp/digests/${digest#sha256:}"
    - name: Upload digest
      uses: actions/upload-artifact@v4
      with:
        name: digests-${{ env.PLATFORM_PAIR }}-${{ inputs.tag }}-${{ inputs.environment }}
        path: /tmp/digests/*
        if-no-files-found: error
        retention-days: 1
